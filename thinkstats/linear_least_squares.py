# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/03_linear_least_squares.ipynb (unless otherwise specified).

__all__ = ['regression_coeffs_with_covar', 'bootstrap_regression']

# Cell
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
from scipy import stats
from functools import partial
import statsmodels.formula.api as smf
import pandas as pd

from thinkstats import basic_stats, hypothesis_testing

# Cell
def regression_coeffs_with_covar(xs:np.ndarray, ys:np.ndarray, return_offset:bool=True):
    "Computing `slope` and `offset`"
    covar = np.cov(xs, ys)[0,1]
    varx = np.var(xs)
    slope = covar/varx
    offset = (ys - slope * xs).mean()
    if not return_offset: return slope
    return slope, offset

# Cell
def bootstrap_regression(xs, ys, regress_func:callable=regression_coeffs_with_covar, max_pct:float=1.,
                         n_iter:int=100):
    "Bootstraps `xs` and `ys` to repeatedly perform regression using `regress_func`"
    assert len(xs) == len(ys)
    n = int(len(xs)*max_pct)
    ix = np.arange(n)

    def bootstrap():
        ix_bs = np.random.choice(ix, size=n)
        return xs[ix_bs], ys[ix_bs]

    xs_bs, ys_bs = bootstrap()

    res = regress_func(xs_bs, ys_bs)
    all_res = np.zeros((n_iter, len(res)))
    all_res[0] = res

    for i in range(1, n_iter):
        xs_bs, ys_bs = bootstrap()
        all_res[i] = regress_func(xs_bs, ys_bs)

    return all_res