# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/01_basic_stats.ipynb (unless otherwise specified).

__all__ = ['effect_size', 'get_discrete_pmf', 'central_moment', 'moment', 'PearsonsMedianSkewness',
           'plot_hist_with_kde']

# Cell
from thinkstats import nsfg
import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt
import matplotlib as mpl

# Cell
def effect_size(m1, m2, v1, v2, n1, n2):
    weighted_std = np.sqrt((n1*v1 + n2*v2)/(n1+n2))
    return (m1-m2)/weighted_std

# Cell
def get_discrete_pmf(samples:np.ndarray):
    "Turns an array of discrete values into a frozen scipy.stats.rv_discrete instance"
    s = pd.Series(data=samples).value_counts(normalize=True)
    return stats.rv_discrete(name="test", values=(s.index, s.values))

# Cell
def central_moment(x:np.ndarray, k:int):
    m = x.mean()
    return ((x-m)**k).mean()

def moment(x:np.ndarray, k:int):
    return (x**k).mean()

# Cell
def PearsonsMedianSkewness(x:np.ndarray):
    median = np.median(x)
    mean = np.mean(x)
    std = np.std(x)
    return 3*(mean-median)/std

# Cell
def plot_hist_with_kde(y, left_ext:int=0, right_ext:int=0, fig_params:dict=None, plot_params:dict=None,
                       ax:mpl.axes._subplots.Axes=None, bins:int=20):
    if ax is None:
        if fig_params is None: fig_params = {}
        fig, ax = plt.subplots(**fig_params)
    ax.hist(y, density=True, bins=bins, alpha=.5)
    kde = stats.gaussian_kde(y)
    x = np.linspace(y.min()-left_ext, y.max()+right_ext, 100)
    ax.plot(x, kde.evaluate(x))
    ax.set(**plot_params)
    return ax