# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/00_nsfg.ipynb (unless otherwise specified).

__all__ = ['data_dir', 'dat_file', 'dct_file', 'type_sub', 'get_dct_dataframe', 'get_dat_dataframe', 'display_all',
           'columns_of_interest', 'cleanup', 'clean_file_path']

# Cell
from pathlib import Path
import pandas as pd
import os, re
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Cell
data_dir = Path("../data/nsfg")

# Cell
dat_file = "2002FemPreg.dat"
dct_file = "2002FemPreg.dct"

# Cell
def type_sub(x, type_map:dict):
    "Substitutes types as found in dct files"
    if x in type_map:
        return type_map[x]
    elif x.startswith("str"):
        return "str"
    else:
        raise ValueError(f"Received an unexpected value for `x` = '{x}'")

def get_dct_dataframe(path:Path):
    "Parses survey description information contained ina *.dct file"
    type_map = {"byte":"int", "int":"int", "long":"int", "float":"float", "double":"float", "numeric":"float"}
    var_info = []
    assert path.name.endswith("dct")
    with open(path, "r") as f:
        for line in f:
            match = re.search(r"_column\((\d*)\)", line)
            if match is None: continue
            start = match.group(1)
            _, vtype, name, fstring, desc = line.split(maxsplit=4)
            desc = desc.strip()[1:-1]
            var_info.append([start, vtype, name, fstring, desc])

    dct = pd.DataFrame(var_info, columns=["start", "vtype", "name", "fstring", "desc"])
    dct["vtype"] = dct["vtype"].apply(type_sub, type_map=type_map)
    dct["start"] = dct["start"].astype(int)
    dct["end"] = np.concatenate((dct.start[1:].values,[0]))

    return dct.infer_objects()

# Cell
def get_dat_dataframe(path:Path, dct:pd.DataFrame, index_base:int=1):
    "Parses survey data in a *.dat file using the previously parsed description information contained in a *.dct file"
    colspecs = (dct[["start", "end"]].values-index_base).tolist()  # defines the extend of each column
    dat = pd.read_fwf(path, names=dct.name, colspecs=colspecs)
    return dat

# Cell
def display_all(df:pd.DataFrame, nrows:int=1000, ncols:int=1000, sort_values:bool=False, ascending:bool=False):
    with pd.option_context('display.max_rows', 1000, 'display.max_columns', 1000):
        display(df.sort_values(ascending=ascending) if sort_values else df)

# Cell
columns_of_interest = ["caseid", "prglngth", "outcome", "pregordr", "birthord", "birthwgt_lb",
                       "birthwgt_oz", "agepreg", "finalwgt"]

# Cell
def cleanup(df:pd.DataFrame):
    "Doing some cleanup as specified in chapter 1"
    df.agepreg /= 100.
    na_vals = [97, 98, 99]
    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)
    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)

    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0
    df['totalwgt_kg'] = df['totalwgt_lb'] * .453592
    df.loc[df.birthwgt_lb > 20, 'birthwgt_lb'] = np.nan
    return df

# Cell
clean_file_path = data_dir.parent/"2002FemPreg.csv"